buildscript {
    repositories {
        mavenCentral()
        maven {
            name "central snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name "gradle plugins"
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    dependencies {
        classpath group: 'gradle.plugin.nl.javadude.gradle.plugins', name: 'license-gradle-plugin', version: '0.12.0'
        classpath group: 'com.techshroom', name: 'Aversion', version: '2.0.1'
    }
}
apply plugin: 'aversion-apt'
apply plugin: 'aversion-util'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'idea'

util {
    javaVersion = '1.8'
    extraContainers.add('org.eclipse.fx.ide.jdt.core.JAVAFX_CONTAINER')
}
idea.project.languageLevel = util.javaVersion

mainClassName = 'me.kenzierocks.ttt.Main'

apply plugin: 'com.github.hierynomus.license'

// JFX is fun.
eclipse.project {
    natures 'org.eclipse.xtext.ui.shared.xtextNature'
    natures 'org.eclipse.buildship.core.gradleprojectnature'
    buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
}
// I don't even.
task eclipseSettings() << {
    def json = """|{
                  |  "1.0": {
                  |    "project_path": ":",
                  |    "project_dir": "${project.file('.')}",
                  |    "connection_project_dir": "${project.file('.')}",
                  |    "connection_gradle_user_home": null,
                  |    "connection_gradle_distribution": "GRADLE_DISTRIBUTION(WRAPPER)",
                  |    "connection_java_home": null,
                  |    "connection_jvm_arguments": "",
                  |    "connection_arguments": ""
                  |  }
                  |}\n""".stripMargin()
    // Write it all to gradle prefs
    file('.settings/gradle.prefs').write json
}
getTasksByName('eclipse', true).each {
    it.dependsOn eclipseSettings
}
// End JFX hacks.

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

def LOGBACK_VERSION = '1.1.5'
def SLF_VERSION = '1.7.16'
dependencies {
    compile group: 'ch.qos.logback', name: 'logback-core', version: LOGBACK_VERSION
    compile group: 'ch.qos.logback', name: 'logback-classic', version: LOGBACK_VERSION
    // Because why not?
    runtime group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.5'
    compile group: 'org.slf4j', name: 'slf4j-api', version: SLF_VERSION
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
	compile group: 'com.squareup', name: 'javapoet', version: '1.7.0'
    // LOL AJE
    compile group: 'com.yuvimasory', name: 'orange-extensions', version: '1.3.0'
    addAPTReqWComp group: 'com.google.guava', name: 'guava', version: '19.0'
    addAPT group: 'com.google.auto.service', name: 'auto-service', version: '1.0-SNAPSHOT'
    addAPT group: 'com.google.auto.value', name: 'auto-value', version: '1.3-SNAPSHOT'
    addAPTReq name: 'aopalliance'
    addAPTReq name: 'asm'
    addAPTReq name: 'auto-value'
    addAPTReq name: 'auto-common'
    addAPTReq name: 'cglib'
    addAPTReq name: 'commons-collections'
    addAPTReq name: 'commons-lang'
    addAPTReq name: 'dagger'
    addAPTReq name: 'javawriter'
    addAPTReq name: 'javax.inject'
    addAPTReq name: 'velocity'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

configure([compileJava, compileTestJava]) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include '**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

task detokenizeSource(type: Copy) {
    from sourceSets.main.allJava.srcDirs
    into 'build/detokenizedSource'
    inputs.property 'version', project.version.toString()
    filter(ReplaceTokens, tokens: [
        'NAME': project.name.toString(),
        'VERSION': project.version.toString()
    ])
}

compileJava.dependsOn(detokenizeSource)
compileJava.source = fileTree(dir: 'build/detokenizedSource')
